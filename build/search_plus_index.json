{"./":{"url":"./","title":"Introduction","keywords":"","body":"笔记 js css git md yarn npm vscode eslint react redux RN_android RN_ios RN_环境配置 shell linux kubuntu node pm2 redis Copyright © zhangjikai.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-09-19 02:16:48 "},"src/js.html":{"url":"src/js.html","title":"js","keywords":"","body":"es6 import export default 数组的解构赋值 let [a, b, c] = [1, 2, 3]; 对象的解构赋值 let { foo, bar } = { foo: \"aaa\", bar: \"bbb\" }; ... var todo = {id: 0, text: \"sdfasdf\", completed: false}; var b = {...todo, completed: !todo.completed} Object.assign() 合并对象 Object.assign(target, source1, source2); Object.keys(), Object.values(), Object.entries() var obj = { foo: 'bar', baz: 42 }; Object.keys(obj) // [\"foo\", \"baz\"] let {keys, values, entries} = Object; let obj = { a: 1, b: 2, c: 3 }; for (let key of keys(obj)) { console.log(key); // 'a', 'b', 'c' } for (let value of values(obj)) { console.log(value); // 1, 2, 3 } for (let [key, value] of entries(obj)) { console.log([key, value]); // ['a', 1], ['b', 2], ['c', 3] } Date //在ES5之中，如果日期采用连词线（-）格式分隔，且具有前导0，JavaScript会认为这是一个ISO格式的日期字符串，导致返回的时间是以UTC时区计算的。 new Date('2014-01-01') // Wed Jan 01 2014 08:00:00 GMT+0800 (CST) new Date('2014-1-1') // Wed Jan 01 2014 00:00:00 GMT+0800 (CST) 但是，ES6改变了这种做法，规定凡是没有指定时区的日期字符串，一律认定用户处于本地时区。 总之，对于YYYY-MM-DD形式的字符串，JavaScript引擎可能会将其当作ISO格式来解析，采用格林尼治时区作为计时标准；而对于其他格式的日期字符串，一律视为非ISO格式，采用本地时区作为计时标准。 new Date('2014-12-11') // Thu Dec 11 2014 08:00:00 GMT+0800 (CST) new Date('2014/12/11') // Thu Dec 11 2014 00:00:00 GMT+0800 (CST) Copyright © zhangjikai.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-09-19 01:33:41 "},"src/css.html":{"url":"src/css.html","title":"css","keywords":"","body":"css 在 android 中的兼容问题 文字 垂直居中 在 android 中偏上 outer{ display:table; position:relative; } inner{ display:table-cell; position: absolute; } border-radius:50% 不圆 把rem宽高改为px就ok space-evenly 在 android 中不支持 Copyright © zhangjikai.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-09-19 01:33:41 "},"src/git.html":{"url":"src/git.html","title":"git","keywords":"","body":"git branch git branch 列出本地已经存在的分支 git branch -a 列出本地分支和远程分支 git branch -d 删除分支 git push origin --delete dev 删除远程分支 git branch dev创建分支 git checkout dev 切换分支 git push origin dev 需要切换到 dev 分支下 git diff git diff origin/master origin/dev dev分支相对master分支的修改 git merge git merge dev 在 master 分支下 merge dev 到 master git tag git tag -a v1.4 -m 'my version 1.4' 添加标签 git push origin v1.5 标签推送到服务器 git push origin --tags推送所有标签 git flow git log Copyright © zhangjikai.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-09-19 01:33:41 "},"src/md.html":{"url":"src/md.html","title":"md","keywords":"","body":"Float 标签（空格分隔）： CSS Float CSS中的float属性被用来在网页上定位和布局。 .module{ float: left; } Values none:这个元素不浮动。这是默认值。 left:浮动这个元素到容器的左边 right:浮动元素到容器的右边 ingerit:这个元素继承父元素的浮动方向。 Note:一个被设置为float的元素会自动变为 display:block; 浮动意味着什么 为了理解这个最初的目的和float的起源，我们可以看印刷设计。在一个印刷布局，图片也许被像这样放在页面上——文本包裹在它的周围。这是一个例子： 在页面布局编程种，这个包括文本的盒子可能被... In page layout programs, the boxes that hold the text can be told to honor the text wrap, or to ignore it. 忽略这个文字换行将浮动到图片的右边。 在网页设计中，被只为float属性的页面元素就像那张图片一样文本将环绕在它周围。 Demo Demo展示了一篇有两张图片的文章：一个被设置为float:left,另外一个被设置为float:right。 Floats For Layout 除过简单的文字环绕例子外，floats可以被用来创建整个网页的布局。 Floats在更小的实例中也是很有用的布局。如果我们给我们的头像图片设置float，那么当这个图片大小被改变，将会重新渲染。 这个同样的布局也可以用相对定位和绝对定位来完成在容器元素内部。但是，相比较而言效果不是特别完美。 Demo 记住这个文字将重新流动适应这个图片而代替显示在这个图片上面。 清除浮动 浮动的同类型属性是 clear。一个被设置了clear属性的元素将不会移动靠近临近的浮动元素正如float的期待，但是将移动它本身通过float。行动比说话要更加有用， 在上面的例子中，sidebar被浮动到右边并且比主页面内容要更短。页脚被要求放置在剩余可用的空间。页脚可以被清除浮动来让它放置在两个浮动元素的下面。 #footer { clear: both; } Clear有四个有效的属性。both是最常用，它清除来自每一个方向的浮动。left和right都可以被用来仅仅清除其中一个方向的浮动。初始值是none，一般认为这个值是没有必要的除非它被显式移除 已经设置的clear属性值 inherit属性使这个元素它的父元素的clear属性。IE直到IE8才支持这个属性。 The Great Collapse 浮动工作时更加令人困惑的事情是他们是怎样影响包含他们的父元素。如果一个父元素只包含浮动元素，那么它的高度将折叠到没有。 清除浮动的技术 空Div方法 。有时，你也许会看到一个元素或者其它随机的元素被用。但是div元素是最常见的因为它没有浏览器默认的样式，没有任何特殊功能。这个方法因为语义问题对于页面而被放弃。当然，严格来说，他们是正确的。它完成了工作并且没有影响其他部分， The Overflow Method 依赖设置CSS属性 overflow在它的父元素上。如果这个属性被设置为 auto 或者 hidden在父元素上，这个父元素将扩展包含浮动元素。这个方法有着清晰的语义，因为它不要求额外的元素。然而，如果你发现你添加了一个新的div元素仅仅是为了应用这个方法。 最简单的清除浮动的方法 （也被了解\"clearfix\"）用一个CSS伪元素(:after）来清除浮动。而不是设置overflow在父元素上。你应用一个额外的类例如 \"clearfix\"。 Copyright © zhangjikai.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-09-19 01:33:41 "},"src/yarn.html":{"url":"src/yarn.html","title":"yarn","keywords":"","body":"yarn add eslint-plugin-import --dev yarn remove eslint-plugin-import yarn global add eslint yarn == yarn install yarn start == npm start yarn init npm i -g serve //静态文件服务 serve folderName //发布 Copyright © zhangjikai.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-09-19 01:33:41 "},"src/npm.html":{"url":"src/npm.html","title":"npm","keywords":"","body":"ubuntu 安装 npm: sudo apt-get install python-software-properties sudo add-apt-repository ppa:gias-kay-lee/npm sudo apt-get update sudo apt-get install npm 升级npm到最新 sudo npm install npm@latest -g Npm的配置管理及设置代理: http://www.cnblogs.com/huang0925/archive/2013/05/17/3083207.html npm init npm install npm config list npm config ls -l npm config set <><> npm config help npm cache clean npm root：查看当前包的安装路径 npm root -g：查看全局的包的安装路径 npm ls -g --depth=0 npm config set proxy http://192.168.1.101:1080 npm config delete proxy 修改 npm全局安装路径 npm config set prefix /home/xx/xx-server/npm/npm-global/ npm config set cache /home/xx/xx-server/npm/npm-cache/ 全局安装了无法找到命令: 全局安装路径 添加到 系统环境变量 echo -e \"export PATH=$(npm prefix -g)/bin:$PATH\" >> ~/.bashrc && source ~/.bashrc 全局安装了无法 require 这个包: export NODE_PATH=$(npm prefix -g)/lib/node_modules 安装过程中说没权限，sudo 也不行: 获取缓存目录 npm config get cache (~/.npm) 删除缓存目录 sudo rm -rf ~/.npm 再次安装坚决不要用 sudo，如果还是出现权限问题请修改安装路径权限 cnpm /usr/bin/env: \"node\": 没有那个文件或目录: ln -s /usr/bin/nodejs /usr/bin/node sudo ln -s /usr/bin/nodejs ~/.nvm/versions/node/v7.3.0/bin/node sudo ln -s ~/.nvm/versions/node/v7.3.0/bin/node /usr/bin/node sudo ln -s ~/.nvm/versions/node/v7.3.0/bin/node /usr/bin/nodejs 3.2、使用npm安装插件：命令提示符执行npm install [-g] [--save-dev]； npm install gulp-less --save-dev -g：全局安装。将会安装在C:\\Users\\Administrator\\AppData\\Roaming\\npm，并且写入系统环境变量； 非全局安装：将会安装在当前定位目录； 全局安装可以通过命令行在任何地方调用它，本地安装将安装在定位目录的node_modules文件夹下，通过require()调用； --save：将保存配置信息至package.json（package.json是nodejs项目配置文件）； -dev：保存至package.json的devDependencies节点，不指定-dev将保存至dependencies节点；一般保存在dependencies的像这些express/ejs/body-parser等等。 npm install，则会根据package.json下载所有需要的包， npm install --production只下载dependencies节点的包）。 3.3、使用npm卸载插件：npm uninstall [-g] [--save-dev] PS：不要直接删除本地插件包 删除全部插件：借助rimraf： npm install rimraf -g 用法：rimraf node_modules 3.4、使用npm更新插件：npm update [-g] [--save-dev] 3.4.1、更新全部插件：npm update [--save-dev] 3.5、查看npm帮助：npm help 3.6、当前目录已安装插件：npm list npm install cnpm -g --registry=https://registry.npm.taobao.org cnpm跟npm用法完全一致，只是在执行命令时将npm改为cnpm（以下操作将以cnpm代替npm） jshint 使用: npm install jshint -g jshint ./app/model.js Copyright © zhangjikai.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-09-19 01:33:41 "},"src/vscode.html":{"url":"src/vscode.html","title":"vscode","keywords":"","body":"选择 Alt + 上下键 切换行 Alt + 左键 选择多个位置 Ctrl + Shift + L 选中所有 重复的 Alt + Shift + 左键 选择多行 Ctrl + Shift + J 搜索时 设置条件 * to match one or more characters in a path segment ? to match on one character in a path segment ** to match any number of path segments, including none {} to group conditions (e.g. {**/*.html,**/*.txt} matches all HTML and text files) [] to declare a range of characters to match (e.g., example.[0-9] to match on example.0, example.1, …) 插件 setting_sync 不同设备 共享 vs code 设置 Ctrl + Shift + P Sync:Reset... 清除设置 Shift + Alt + U 上传 Shift + Alt + D 下载 GITHUB TOKEN: 7bf4addb6689677bb2f56dec8e78ad1f4b865f38 GITHUB GIST: 873bd7e41a7481209f6841dc5aa3c161 GITHUB GIST TYPE: Secret 将 GITHUB GIST 赋给 vscode 用户设置中的 \"sync.gist\": \"873bd7e41a7481209f6841dc5aa3c161\", Document This Ctrl + Alt + D 2次 类,函数注释 vscode-file-header Ctrl + Alt + I 头部文件注释 Copyright © zhangjikai.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-09-19 01:33:41 "},"src/eslint.html":{"url":"src/eslint.html","title":"eslint","keywords":"","body":"初始化 eslint --init http://www.jianshu.com/p/8b49e268fe69 yarn add --dev eslint-plugin-import yarn add --dev babel-eslint yarn add --dev eslint-plugin-react yarn add --dev eslint-plugin-react-native roles { \"no-alert\": 0,//禁止使用alert confirm prompt \"no-array-constructor\": 2,//禁止使用数组构造器 \"no-bitwise\": 0,//禁止使用按位运算符 \"no-caller\": 1,//禁止使用arguments.caller或arguments.callee \"no-catch-shadow\": 2,//禁止catch子句参数与外部作用域变量同名 \"no-class-assign\": 2,//禁止给类赋值 \"no-cond-assign\": 2,//禁止在条件表达式中使用赋值语句 \"no-console\": 2,//禁止使用console \"no-const-assign\": 2,//禁止修改const声明的变量 \"no-constant-condition\": 2,//禁止在条件中使用常量表达式 if(true) if(1) \"no-continue\": 0,//禁止使用continue \"no-control-regex\": 2,//禁止在正则表达式中使用控制字符 \"no-debugger\": 2,//禁止使用debugger \"no-delete-var\": 2,//不能对var声明的变量使用delete操作符 \"no-div-regex\": 1,//不能使用看起来像除法的正则表达式/=foo/ \"no-dupe-keys\": 2,//在创建对象字面量时不允许键重复 {a:1,a:1} \"no-dupe-args\": 2,//函数参数不能重复 \"no-duplicate-case\": 2,//switch中的case标签不能重复 \"no-else-return\": 2,//如果if语句里面有return,后面不能跟else语句 \"no-empty\": 2,//块语句中的内容不能为空 \"no-empty-character-class\": 2,//正则表达式中的[]内容不能为空 \"no-empty-label\": 2,//禁止使用空label \"no-eq-null\": 2,//禁止对null使用==或!=运算符 \"no-eval\": 1,//禁止使用eval \"no-ex-assign\": 2,//禁止给catch语句中的异常参数赋值 \"no-extend-native\": 2,//禁止扩展native对象 \"no-extra-bind\": 2,//禁止不必要的函数绑定 \"no-extra-boolean-cast\": 2,//禁止不必要的bool转换 \"no-extra-parens\": 2,//禁止非必要的括号 \"no-extra-semi\": 2,//禁止多余的冒号 \"no-fallthrough\": 1,//禁止switch穿透 \"no-floating-decimal\": 2,//禁止省略浮点数中的0 .5 3. \"no-func-assign\": 2,//禁止重复的函数声明 \"no-implicit-coercion\": 1,//禁止隐式转换 \"no-implied-eval\": 2,//禁止使用隐式eval \"no-inline-comments\": 0,//禁止行内备注 \"no-inner-declarations\": [2, \"functions\"],//禁止在块语句中使用声明（变量或函数） \"no-invalid-regexp\": 2,//禁止无效的正则表达式 \"no-invalid-this\": 2,//禁止无效的this，只能用在构造器，类，对象字面量 \"no-irregular-whitespace\": 2,//不能有不规则的空格 \"no-iterator\": 2,//禁止使用__iterator__ 属性 \"no-label-var\": 2,//label名不能与var声明的变量名相同 \"no-labels\": 2,//禁止标签声明 \"no-lone-blocks\": 2,//禁止不必要的嵌套块 \"no-lonely-if\": 2,//禁止else语句内只有if语句 \"no-loop-func\": 1,//禁止在循环中使用函数（如果没有引用外部变量不形成闭包就可以） \"no-mixed-requires\": [0, false],//声明时不能混用声明类型 \"no-mixed-spaces-and-tabs\": [2, false],//禁止混用tab和空格 \"linebreak-style\": [0, \"windows\"],//换行风格 \"no-multi-spaces\": 1,//不能用多余的空格 \"no-multi-str\": 2,//字符串不能用\\换行 \"no-multiple-empty-lines\": [1, {\"max\": 2}],//空行最多不能超过2行 \"no-native-reassign\": 2,//不能重写native对象 \"no-negated-in-lhs\": 2,//in 操作符的左边不能有! \"no-nested-ternary\": 0,//禁止使用嵌套的三目运算 \"no-new\": 1,//禁止在使用new构造一个实例后不赋值 \"no-new-func\": 1,//禁止使用new Function \"no-new-object\": 2,//禁止使用new Object() \"no-new-require\": 2,//禁止使用new require \"no-new-wrappers\": 2,//禁止使用new创建包装实例，new String new Boolean new Number \"no-obj-calls\": 2,//不能调用内置的全局对象，比如Math() JSON() \"no-octal\": 2,//禁止使用八进制数字 \"no-octal-escape\": 2,//禁止使用八进制转义序列 \"no-param-reassign\": 2,//禁止给参数重新赋值 \"no-path-concat\": 0,//node中不能使用__dirname或__filename做路径拼接 \"no-plusplus\": 0,//禁止使用++，-- \"no-process-env\": 0,//禁止使用process.env \"no-process-exit\": 0,//禁止使用process.exit() \"no-proto\": 2,//禁止使用__proto__属性 \"no-redeclare\": 2,//禁止重复声明变量 \"no-regex-spaces\": 2,//禁止在正则表达式字面量中使用多个空格 /foo bar/ \"no-restricted-modules\": 0,//如果禁用了指定模块，使用就会报错 \"no-return-assign\": 1,//return 语句中不能有赋值表达式 \"no-script-url\": 0,//禁止使用javascript:void(0) \"no-self-compare\": 2,//不能比较自身 \"no-sequences\": 0,//禁止使用逗号运算符 \"no-shadow\": 2,//外部作用域中的变量不能与它所包含的作用域中的变量或参数同名 \"no-shadow-restricted-names\": 2,//严格模式中规定的限制标识符不能作为声明时的变量名使用 \"no-spaced-func\": 2,//函数调用时 函数名与()之间不能有空格 \"no-sparse-arrays\": 2,//禁止稀疏数组， [1,,2] \"no-sync\": 0,//nodejs 禁止同步方法 \"no-ternary\": 0,//禁止使用三目运算符 \"no-trailing-spaces\": 1,//一行结束后面不要有空格 \"no-this-before-super\": 0,//在调用super()之前不能使用this或super \"no-throw-literal\": 2,//禁止抛出字面量错误 throw \"error\"; \"no-undef\": 1,//不能有未定义的变量 \"no-undef-init\": 2,//变量初始化时不能直接给它赋值为undefined \"no-undefined\": 2,//不能使用undefined \"no-unexpected-multiline\": 2,//避免多行表达式 \"no-underscore-dangle\": 1,//标识符不能以_开头或结尾 \"no-unneeded-ternary\": 2,//禁止不必要的嵌套 var isYes = answer === 1 ? true : false; \"no-unreachable\": 2,//不能有无法执行的代码 \"no-unused-expressions\": 2,//禁止无用的表达式 \"no-unused-vars\": [2, {\"vars\": \"all\", \"args\": \"after-used\"}],//不能有声明后未被使用的变量或参数 \"no-use-before-define\": 2,//未定义前不能使用 \"no-useless-call\": 2,//禁止不必要的call和apply \"no-void\": 2,//禁用void操作符 \"no-var\": 0,//禁用var，用let和const代替 \"no-warning-comments\": [1, { \"terms\": [\"todo\", \"fixme\", \"xxx\"], \"location\": \"start\" }],//不能有警告备注 \"no-with\": 2,//禁用with \"array-bracket-spacing\": [2, \"never\"],//是否允许非空数组里面有多余的空格 \"arrow-parens\": 0,//箭头函数用小括号括起来 \"arrow-spacing\": 0,//=>的前/后括号 \"accessor-pairs\": 0,//在对象中使用getter/setter \"block-scoped-var\": 0,//块语句中使用var \"brace-style\": [1, \"1tbs\"],//大括号风格 \"callback-return\": 1,//避免多次调用回调什么的 \"camelcase\": 2,//强制驼峰法命名 \"comma-dangle\": [2, \"never\"],//对象字面量项尾不能有逗号 \"comma-spacing\": 0,//逗号前后的空格 \"comma-style\": [2, \"last\"],//逗号风格，换行时在行首还是行尾 \"complexity\": [0, 11],//循环复杂度 \"computed-property-spacing\": [0, \"never\"],//是否允许计算后的键名什么的 \"consistent-return\": 0,//return 后面是否允许省略 \"consistent-this\": [2, \"that\"],//this别名 \"constructor-super\": 0,//非派生类不能调用super，派生类必须调用super \"curly\": [2, \"all\"],//必须使用 if(){} 中的{} \"default-case\": 2,//switch语句最后必须有default \"dot-location\": 0,//对象访问符的位置，换行的时候在行首还是行尾 \"dot-notation\": [0, { \"allowKeywords\": true }],//避免不必要的方括号 \"eol-last\": 0,//文件以单一的换行符结束 \"eqeqeq\": 2,//必须使用全等 \"func-names\": 0,//函数表达式必须有名字 \"func-style\": [0, \"declaration\"],//函数风格，规定只能使用函数声明/函数表达式 \"generator-star-spacing\": 0,//生成器函数*的前后空格 \"guard-for-in\": 0,//for in循环要用if语句过滤 \"handle-callback-err\": 0,//nodejs 处理错误 \"id-length\": 0,//变量名长度 \"indent\": [2, 4],//缩进风格 \"init-declarations\": 0,//声明时必须赋初值 \"key-spacing\": [0, { \"beforeColon\": false, \"afterColon\": true }],//对象字面量中冒号的前后空格 \"lines-around-comment\": 0,//行前/行后备注 \"max-depth\": [0, 4],//嵌套块深度 \"max-len\": [0, 80, 4],//字符串最大长度 \"max-nested-callbacks\": [0, 2],//回调嵌套深度 \"max-params\": [0, 3],//函数最多只能有3个参数 \"max-statements\": [0, 10],//函数内最多有几个声明 \"new-cap\": 2,//函数名首行大写必须使用new方式调用，首行小写必须用不带new方式调用 \"new-parens\": 2,//new时必须加小括号 \"newline-after-var\": 2,//变量声明后是否需要空一行 \"object-curly-spacing\": [0, \"never\"],//大括号内是否允许不必要的空格 \"object-shorthand\": 0,//强制对象字面量缩写语法 \"one-var\": 1,//连续声明 \"operator-assignment\": [0, \"always\"],//赋值运算符 += -=什么的 \"operator-linebreak\": [2, \"after\"],//换行时运算符在行尾还是行首 \"padded-blocks\": 0,//块语句内行首行尾是否要空行 \"prefer-const\": 0,//首选const \"prefer-spread\": 0,//首选展开运算 \"prefer-reflect\": 0,//首选Reflect的方法 \"quotes\": [1, \"single\"],//引号类型 `` \"\" '' \"quote-props\":[2, \"always\"],//对象字面量中的属性名是否强制双引号 \"radix\": 2,//parseInt必须指定第二个参数 \"id-match\": 0,//命名检测 \"require-yield\": 0,//生成器函数必须有yield \"semi\": [2, \"always\"],//语句强制分号结尾 \"semi-spacing\": [0, {\"before\": false, \"after\": true}],//分号前后空格 \"sort-vars\": 0,//变量声明时排序 \"space-after-keywords\": [0, \"always\"],//关键字后面是否要空一格 \"space-before-blocks\": [0, \"always\"],//不以新行开始的块{前面要不要有空格 \"space-before-function-paren\": [0, \"always\"],//函数定义时括号前面要不要有空格 \"space-in-parens\": [0, \"never\"],//小括号里面要不要有空格 \"space-infix-ops\": 0,//中缀操作符周围要不要有空格 \"space-return-throw-case\": 2,//return throw case后面要不要加空格 \"space-unary-ops\": [0, { \"words\": true, \"nonwords\": false }],//一元运算符的前/后要不要加空格 \"spaced-comment\": 0,//注释风格要不要有空格什么的 \"strict\": 2,//使用严格模式 \"use-isnan\": 2,//禁止比较时使用NaN，只能用isNaN() \"valid-jsdoc\": 0,//jsdoc规则 \"valid-typeof\": 2,//必须使用合法的typeof的值 \"vars-on-top\": 2,//var必须放在作用域顶部 \"wrap-iife\": [2, \"inside\"],//立即执行函数表达式的小括号风格 \"wrap-regex\": 0,//正则表达式字面量用小括号包起来 \"yoda\": [2, \"never\"]//禁止尤达条件 } Copyright © zhangjikai.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-09-19 01:33:41 "},"src/react.html":{"url":"src/react.html","title":"react","keywords":"","body":"Copyright © zhangjikai.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-09-19 01:33:41 "},"src/redux.html":{"url":"src/redux.html","title":"redux","keywords":"","body":"redux 用户发出Action store.dispatch(action); Store 自动调用 Reducer, 传2个参数 当前 State 和 收到的 Action let nextState = todoApp(previousState, action); Reducer 会返回新的 State State 一旦有变化, Store 就会触发更新 View react-redux React-Redux 将所有组件分成两大类：UI 组件（presentational component）和容器组件（container component）。 UI 组件 又称 纯组件 只负责 UI 的呈现，不带有任何业务逻辑 没有状态（即不使用this.state这个变量） 所有数据都由参数（this.props）提供 不使用任何 Redux 的 API 容器组件 负责管理数据 负责管理数据和业务逻辑，不负责 UI 的呈现 带有内部状态 使用 Redux 的 API connect React-Redux 提供connect方法，用于从 UI 组件生成容器组件。connect的意思，就是将这两种组件连起来。 mapStateToProps, mapDispatchToProps 前者负责输入逻辑，即将state映射到 UI 组件的参数（props），后者负责输出逻辑，即将用户对 UI 组件的操作映射成 Action。 组件 Provider在根组件外面包了一层，这样一来，App的所有子组件就默认都可以拿到state了 Redux Thunk Copyright © zhangjikai.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-09-19 01:33:41 "},"src/RN_android.html":{"url":"src/RN_android.html","title":"RN_android","keywords":"","body":"React-native android 0 调试 你可以通过摇晃设备或是选择iOS模拟器的\"Hardware\"菜单中的\"Shake Gesture\"选项来打开开发菜单。另外，如果是在iOS模拟器中运行，还可以按下Command⌘ + D 快捷键，Android模拟器对应的则是Command⌘ + M（windows上可能是F1或者F2）。 1 windows android 每次 下载 gradle的问题 Exception in thread “main” java.net.ConnectException: Connection timed out: conn ect 手动下载: http://services.gradle.org/distributions/gradle-2.4-all.zip 修改改 {MyProject-path}\\android\\gradle\\wrapper\\gradle-wrapper 里的 distributionUrl 为本地路径： distributionUrl=file:///D:/xingqiyi/RN/gradle-2.4-all.zip 2 failed to find Build Tools revision 25.0.2 android sdk 版本 问题 见rn 初始化 步骤 Android Studio Tools -> Android -> SDK Manager 3 react-native-starter 中 API_KEY not definded issue: Let copy .env.sample to .env file and change the configuration variables .env.sample 文件 改名为 .env 4 命令行翻墙 set HTTP_proxy=http://127.0.0.1:62497 set HTTPS_proxy=http://127.0.0.1:62497 5 Error: EPERM: operation not permitted, 网络问题 6 很慢: Resolving dependencies ':app:_releaseApk' ./android/build.gradle change your jcenter() to mavenCentral() : buildscript { repositories { // jcenter() mavenCentral() } 7 expected a component class, got [object Object] 组件大小写的问题 JSX中 不能使用 div 等 html 8 could not get batchedbridge make sure https://stackoverflow.com/questions/34175416/how-to-use-offline-bundle-on-android-for-react-native-project react-native bundle --platform android --dev false --entry-file index.android.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res/ 1 when server start, open next terminal with same path as project path 2 copy and paste this command: Before you copy and paste command in command propmt, make assets folder in project respective path as: android/app/src/main/assets paste this command in command prompt and run: react-native bundle --platform android --dev false --entry-file index.android.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res/ 3 Then in assets folder there will appear file as index.android.bundle 4 Finally, run command: react-native run-android(while building new offline apk you need not to start server, your offline js file will help you to build apk file.) 5 Final, apk now build is ready for running in different devices(run apk from app/src/build/debug.apk). 6 Sometimes newly made apk will run without showing images, If application runs without image , then copy and paste the specific image resource folder into android/app/src/main/assets/(image source folder) 7 Again rerun application and thus build apk is ready for running. 9 android 打包步骤 1 添加文件夹: \\android\\app\\src\\main\\assets 2 运行 react-native run-android 3 运行 react-native bundle --platform android --dev false --entry-file index.android.js --bundle-output android/app/src/main/assets/index.android.bundle --assets-dest android/app/src/main/res/ 4 运行 react-native run-android 5 \\android\\app\\build\\outputs\\apk\\app-debug.apk 6 如果图片异常,复制图片到 assets文件夹,rerun Copyright © zhangjikai.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-09-19 01:33:41 "},"src/RN_ios.html":{"url":"src/RN_ios.html","title":"RN_ios","keywords":"","body":"1 初始化 版本指定 react-native init AwesomeProject --version 0.44.3 2 no bundle url present make sure Edit /ios//AppDelegate.m and change the jsCodeLocation variable as follows: jsCodeLocation = [NSURL URLWithString:@\"http://127.0.0.1:8081/index.ios.bundle?platform=ios&dev=true\"]; 3 在开发者菜单中选择\"Debug JS Remotely\"选项， 即可以开始在Chrome中调试JavaScript代码。点击这个选项的同时会自动打开调试页面 http://localhost:8081/debugger-ui. 4 ios 真机 调试 RCTWebSocketExecutor.m localhost 改 ip AppDelegate.m 改为 ip jsCodeLocation = [NSURL URLWithString:@\"http://192.168.1.255:8081/index.ios.bundle?platform=ios&dev=true\"]; 5 真机调试 设置 team 报错 Failed to create provisioning profile. The app ID 选择 ssr 6 真机调试时 打包时 Please unlock your device and reattach. (0xE80000E2). 解决方法是：打开手机设置->通用->还原->还原位置与隐私； 然后会有弹窗提示你是否信任此电脑，点击信任，重启Xcode之后，运行项目到手机上 解决办法来自于：iOS中项目运行到真机上提示设备被锁定解决方法Development cannot be enabled while your device is locked. ，谢谢 7 No devices are booted. 重启模拟器 Boot the respective simulator manually Go to spotlight search and start to type simulator When spotlight presents the search result, choose the simulator app and hit Enter Go to simulator app's menu: Hardwire -> Device -> iOS 10.0 -> iPhone 6 and select it Reset Go to simulator app's menu: Simulator -> Reset Content and Settings... Retry Command react-native run-ios again 8 Print: Entry, \":CFBundleIdentifier\", Does Not Exist rm -rf ~/.rncache 9 模拟器 与真机直接的切换 打包时需改成真机 AppDelegate.m #模拟器 jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index.ios\" fallbackResource:nil]; #真机： jsCodeLocation = [[NSBundle mainBundle] URLForResource:@\"index.ios\" withExtension:@\"jsbundle\"]; 10 11 no dimension set for key window 删掉 ios/build 重运行 12 根目录文件不能叫 index.js 猜测应该是与 index.ios.js 冲突 13 打包 打包 需要在 ios 文件夹; android 需要新建assets 文件夹 http://blog.csdn.net/sinat_34380438/article/details/76614309 Copyright © zhangjikai.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-09-19 01:33:41 "},"src/RN_环境配置.html":{"url":"src/RN_环境配置.html","title":"RN_环境配置","keywords":"","body":"React-Native 的 android 开发环境配置(windows) JS环境 1. Chocolatey 管理员打开 cmd @powershell -NoProfile -ExecutionPolicy Bypass -Command \"iex ((new-object net.webclient).DownloadString('https://chocolatey.org/install.ps1'))\" && SET PATH=%PATH%;%ALLUSERSPROFILE%\\chocolatey\\bin 2. python choco install python2 3. nodejs choco install nodejs.install 4. npm 设置 npm config set registry https://registry.npm.taobao.org --global npm config set disturl https://npm.taobao.org/dist --global 5. yarn, rn命令行工具安装 npm install -g yarn react-native-cli 6. yarn 设置 yarn config set registry https://registry.npm.taobao.org --global yarn config set disturl https://npm.taobao.org/dist --global 7. 系统环境变量 npm: C:\\Users\\admin\\AppData\\Roaming\\npm nodejs: C:\\Program Files\\nodejs\\ C:\\Users\\admin\\AppData\\Roaming\\npm\\node_modules android sdk: D:\\Users\\admin\\AppData\\Local\\Android\\sdk\\tools Android 环境配置 参照 http://reactnative.cn/docs/0.46/getting-started.html#content Android Studio 章节 代码编写 新建项目方式一 react-native init ProjectName cd ProjectName react-native run-android 新建项目方式二 expo create-react-native-app AwesomeProject cd AwesomeProject npm start android 与 windows 同局域网 android 机器上安装 app Expo 使用该app 扫码 上一笔步骤生成的二维码 即可 Copyright © zhangjikai.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-09-19 01:35:16 "},"src/shell.html":{"url":"src/shell.html","title":"shell","keywords":"","body":"401-shell Copyright © zhangjikai.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-09-19 01:34:16 "},"src/linux.html":{"url":"src/linux.html","title":"linux","keywords":"","body":"限制cpu占用 工具 cpulimit cpulimit -e firefox -l 30 //copy 文件夹 -r 递归 cp -r folder1 folder2 查看权限 ls -l ls -a 查看all 包括隐藏文件 查看在线用户 who 编辑文件 sudo gedit filename Linux下删除非空文件夹： rm -rf dirname -r 循环 -f 强制 Linux下删除空文件夹： rmdir -p dirname linux下重命名文件或文件夹的命令mv既可以重命名，又可以移动文件或文件夹. 例子：将目录A重命名为B mv A B 例子：将/a目录移动到/b下，并重命名为c mv /a /b/c ssh copy 文件 scp filename1 远程用户名@IP：目录/filename2 -v pwd 查看当前路径 vi NewFilename 新建 文件 编辑文件 mkdir /home/u1 新建文件夹 各种压缩命令： http://www.cnblogs.com/eoiioe/archive/2008/09/20/1294681.html .tar.gz 和 .tgz: 解压：tar zxvf FileName.tar.gz 压缩：tar zcvf FileName.tar.gz DirName .rar 解压：rar x FileName.rar 压缩：rar a FileName.rar DirName 查看,修改文件 权限: http://www.cppblog.com/deercoder/articles/110129.html 行动： 表示添加权限 表示删除权限 = 表示使之成为唯一的权限 ugoa+-=rwx chmod ug+w,o-w file 用户和组可写,其他不可写 chmod 777 filename 所有 chmod [-R] xyz 文件或目录-R：进行递归的持续更改，即连同子目录下的所有文件都会更改 以下命令可以查看磁盘各分区大小、已用空间等信息： df -h 以下命令可以查看foo目录的大小： du -sh foo 查看当前目录下的所有目录以及子目录的大小 $ du -h $ du -ah -h:用K、M、G的人性化形式显示 human-readable -a:显示目录和文件 all -s:sum du -h tmp du -ah tmp 只查看当前目录下的tmp目录(包含子目录)的大小 查看当前目录及其指定深度目录的大小 sudo du -ah --max-depth=1 --max-depth＝n:只深入到第n层目录，此处设置为0，即表示不深入到子目录 free -k/-m/-g 查看内存使用情况 uptime 用来显示任务队列信息。 | 现在的时间 | 系统开机运转到现在经过的时间 | 连线的使用者数量 | 最近一分钟，五分钟和十五分钟的系统负载 | 11:00:16 up 1 day, 2:24, 4 users, load average: 0.21, 0.25, 0.36 top 查看 系统资源占用 npm: sudo apt-get install python-software-properties sudo add-apt-repository ppa:gias-kay-lee/npm sudo apt-get update sudo apt-get install npm node: $ sudo add-apt-repository ppa:chris-lea/node.js $ sudo apt-get update $ sudo apt-get install nodejs gedit: sudo apt-get install gedit 端口: 一、查看哪些端口被打开 netstat -anp 二、关闭端口号:iptables -A INPUT -p tcp --drop 端口号-j DROP 　　iptables -A OUTPUT -p tcp --dport 端口号-j DROP 三、打开端口号：iptables -A INPUT -ptcp --dport 端口号-j ACCEPT 四、以下是linux打开端口命令的使用方法。 　　nc -lp 23 &(打开23端口，即telnet) 　　netstat -an | grep 23 (查看是否打开23端口) 五、linux打开端口命令每一个打开的端口，都需要有相应的监听程序才可以 查看 是否开通端口 telnet www.geonoon.net 3001 run name.sh: ./name.sh or sh name.sh 修改配置文件后 source file 可不重启 及时生效 echo 输出信息到屏幕 或文件 echo \"This is a test.\" > ./test.txt Copyright © zhangjikai.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-09-19 01:33:41 "},"src/kubuntu.html":{"url":"src/kubuntu.html","title":"kubuntu","keywords":"","body":"dolphin: f3 拆分切换 f8 隐藏文件 kconsole: ctrl + shift + k/l 清屏 ctrl + w 关闭标签 方法一： 　　如果只是想临时使用http代理，可以在使用apt-get之前于终端下输入： export http_proxy=\"http://用户名:密码@代理IP:代理端口\" export http_proxy=\"http://192.168.1.20:1080\" 方法二：（方法一的持久化） 　　如果希望apt-get与其它应用程序都可以一直使用http代理，可以这样： 　　在终端下编辑~/.bashrc文件：　　vim ~/.bashrc 　　在文件末尾添加如下两句： http_proxy=\"http://192.168.1.20:1080\" export http_proxy 全局 f1 桌面 alt + s google alt + b baidu f4 mac的f3 ctrl+alt+esc kill 一个窗口 linux 挂载 ntfs 先安装： sudo apt-get install ntfs-config 再配置一下： sudo ntfs-config 格式化为 ntfs sudo apt-get install ntfsprogs sudo mkntfs /dev/sdb1 sudo mkfs.vfat -F 32 /dev/sdb1即可将u盘格式化为fat32格式。 假如你要把指定磁盘格式化为NTFS格式那么你需要sudo apt-get install ntfsprogs来安装ntfs读写工具，然后执行sudo mkfs.ntfs /dev/sda1，此过程会很慢。对于要格式化为linux ext格式的分区就更容易了： sudo mkfs.ext4 /dev/sda1 # 格式化为ext4分区 sudo mkfs.ext3 /dev/sda1 # 格式化为ext3分区 sudo mkfs.ext2 /dev/sda1 #格式化为ext2分区 PS：对于要格式化的分区必须要先用umount卸载掉才能格式化哦。 备份系统：到 /media/bkp： 清理旧版本的软件缓存 sudo apt-get autoclean # 清理所有软件缓存 sudo apt-get clean # 删除系统不再使用的孤立软件 sudo apt-get autoremove sudo tar vzcpf /media/bkp/ubuntu`date +%Y%m%d%H.tar.gz --exclude=/proc --exclude=/dev--exclude=/mnt --exclude=/media --exclude=/lost+found --exclude=/cdrom --exclude=/tmp --exclude=/sys --exclude=/home/xx/.cache --exclude=/run / > /media/bkp/ubuntu_date +%Y%m%d%H`.log 2> /media/bkp/ubuntudate +%Y%m%d_%H.error 恢复系统： 推荐备份下：/boot和/etc/fstab，然后再执行恢复命令 将备份文件拷贝到/目录，执行恢复命令： 使用gzip格式 su - root tar vxzpf ubuntu*.tar.gz -C / KDE - Baloo file-index is not working Disable it in ~/.kde4/share/config/baloofilerc. Set Indexing-Enabled=false Copyright © zhangjikai.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-09-19 01:33:41 "},"src/node.html":{"url":"src/node.html","title":"node","keywords":"","body":"Copyright © zhangjikai.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-09-19 01:33:41 "},"src/pm2.html":{"url":"src/pm2.html","title":"pm2","keywords":"","body":"pm2 start app.js --name=\"api\" pm2 start (0,2,3) pm2 flush #清空日志 pm2 install pm2-logrotate pm2 get pm2-logrotate 查询设置 pm2 set pm2-logrotate:max_size 1K pm2 set pm2-logrotate:compress true pm2 set pm2-logrotate:rotateInterval '*/5 * * * *' pm2 set pm2-logrotate:retain 100 Start the maximum processes depending on available CPUspm2 start app.js -i 0 Start the maximum processes -1 depending on available CPUs pm2 start app.js -i -1 Start 3 processes pm2 start app.js -i 3 pm2 reload 正确情况下，PM2采用fork模式新建worker进程，即主进程fork自身，产生一个worker进程。 pm2 reload命令则会用spawn方式启动，即一个接一个启动worker进程，一个新的worker启动成功，再杀死一个旧的worker进程。 采用这种方式，重新部署新版本时，服务器就不会中断服务。 $pm2 monit Copyright © zhangjikai.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-09-19 01:33:41 "},"src/redis.html":{"url":"src/redis.html","title":"redis","keywords":"","body":"查看 redis相关信息 redis-cli -h localhost info redis-cli -h localhost info | grep 'redis_version' redis-server -v config set stop-writes-on-bgsave-error no redis-cli -h 192.168.1.10 -p 6379 auth Geonoon keys * smembers setname flushdb 其实Redis是可以安装成windows服务的，开机自启动，命令如下： redis-server --service-install redis.windows.conf 安装完之后，就可看到Redis已经作为windows服务了 启动停止服务: redis-server --service-start redis-server --service-stop lua: redis-cli --eval detect.lua SET detect \"ssss\" SCRIPT LOAD \"local f=loadstring(redis.call('get',KEYS[1]));return f()\" EVALSHA \"1d757ea0d253288071ab7e2358562b8721098142\" 1 detect okALqsGyR/yjMzjU/G8AKg== 查看redis 内存情况: info memory watch: http://www.guoweiwei.com/2012/09/redis-status-and-performance-monitor.html redis-benchmark -h localhost -p 6379 -c 100 -n 100000 redis-cli -h localhost -p 6379 monitor redis-cli -h localhost -p 6379 info redis-stat : java -jar redis-stat-0.4.13.jar --server Copyright © zhangjikai.com 2017 all right reserved，powered by Gitbook该文件修订时间： 2017-09-19 01:33:41 "}}